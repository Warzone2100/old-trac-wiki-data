#!/bin/bash
#       gitsvngateway: A tool to move commits from svn to git and from git to svn
#       Copyright (C) 2009 Gerard Krol
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

if [ $# -ne 2 ]
then
	echo "Usage: gitsvngateway [local branch] [svn remote branch]"
	echo "If you want to reset the state of this script remove the gitsvngateway.*.*.state file."
	echo "This script assumes that your public git repository is \"origin\""
	exit
fi

git=$1
svn=$2
statefile="gitsvngateway.$git.$svn.state"
statefile=${statefile//\//_}

if [ -e $statefile ]
then
	state=`cat "$statefile"`
else
	state=init
fi

echo "== Current state: ${state}"

# svn -> git

if [ "$state" = "init" ]
then

	echo "== Storing pre-commit states"
	git branch ${git}_old ${git}
	git branch ${svn}_old ${svn}
	state=svn2git
	echo $state > "$statefile"

	echo "== You need to run this command on all branches you want to keep in sync."
	echo "== Otherwise it will not be able to determine which commits from git svn fetch are new."
	echo "== Please do this now and restart this script (with the same arguments) to continue."
	exit
fi

if [ "$state" = "svn2git" ]
then
	echo "== Marking current state of ${git}"
	git branch ${git}_new ${git}

	echo "== Fetching commits from SVN"
	git svn fetch

	echo "== Rebasing commits from ${svn} onto ${git}"
	git checkout ${svn} -b ${svn}_new
	git rebase --onto ${git} ${svn}_old ${svn}_new
	if [ $? -ne 0 ]
	then
		echo svn2git_rebase_complete > "$statefile"
		echo "== Finish the rebase and restart this script (with the same arguments)"
		exit
	fi
	state=svn2git_rebase_complete
	echo $state > "$statefile"
fi

if [ "$state" = "svn2git_rebase_complete" ]
then
	echo "== ${svn}_new is the new ${git}"
	git branch -D ${git}
	git checkout ${svn}_new -b ${git}
	git branch -D ${svn}_new

	# git -> svn

	echo "== Rebasing commits from ${git} onto ${svn}"
	echo git rebase --onto ${svn} ${git}_old ${git}_new
	git rebase --onto ${svn} ${git}_old ${git}_new
	if [ $? -ne 0 ]
	then
		echo git2svn_rebase_complete > "$statefile"
		echo "== Finish the rebase and and restart this script (with the same arguments)"
		exit
	fi
	state=git2svn_rebase_complete
	echo $state > "$statefile"
fi

if [ "$state" = "git2svn_rebase_complete" ]
then
	echo "== Committing to SVN"
	git svn dcommit

	echo "== Checking out master"
	git checkout $git
	git branch -D ${git}_new

	echo "== Pushing the changes to origin"
	git push origin ${git}

	echo "== Marking current state of ${git} and ${svn}"
	git branch -f ${git}_old ${git}
	git branch -f ${svn}_old ${svn}

	echo svn2git > "$statefile"
fi
